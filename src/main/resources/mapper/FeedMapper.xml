<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.flabcaloriecounter.feed.adapter.out.persistence.FeedMapper">
    <insert id="write" parameterType="com.example.flabcaloriecounter.feed.application.port.in.dto.FeedDto">
        INSERT INTO feed(contents, user_id)
        values (#{contents}, #{userId})
        <selectKey keyColumn="FEED_ID" keyProperty="id" resultType="long" order="AFTER">
            select last_insert_id()
        </selectKey>
    </insert>

    <select id="findByFeedId" parameterType="long" resultType="com.example.flabcaloriecounter.feed.domain.Feed">
        select FEED_ID, CONTENTS, USER_ID
        from FEED
        where FEED_ID = #{feedId}
    </select>

    <select id="isExistId" resultType="boolean">
        SELECT EXISTS(select user_Id from USER_TABLE where user_Id = #{userId})
    </select>

    <insert id="insertImage" parameterType="java.util.List">
        insert into PHOTO(photo_name, photo_path, feed_ID)
        values
        <foreach collection="imagePathResult" item="file" separator=",">
            (
            #{file.imageName},
            #{file.imagePath},
            #{file.latestFeedId}
            )
        </foreach>
    </insert>

    <select id="findImageByFeedId" parameterType="long" resultType="com.example.flabcaloriecounter.feed.domain.Photo">
        select photo_id, photo_name, upload_date, photo_path, feed_id
        from PHOTO
        where FEED_ID = #{feedId}
    </select>

    <select id="maxCursor" resultType="long">
        select Max(FEED_ID)
        from FEED;
    </select>

    <select id="maxDepth" resultType="int">
        select Max(DEPTH)
        from COMMENT
        where GROUP_NUMBER = #{groupNumber}
    </select>

    <select id="getFeedList" resultType="com.example.flabcaloriecounter.feed.application.port.in.dto.FeedListDto">
        select f.feed_id,
               f.contents,
               f.writeDate,
               u.ID
        from FEED as f
                 inner join user_table u on u.id = f.user_id

        where f.feed_id &lt;= #{paging.cursorNo}
        order by f.feed_id desc
        limit #{paging.displayPerPage};
    </select>

    <select id="photos" resultType="com.example.flabcaloriecounter.feed.domain.Photo">
        select photo_id, photo_name, upload_date, photo_path, feed_id
        from photo p
        where p.feed_id = #{feedId};
    </select>

    <update id="updateImage">
        UPDATE PHOTO
        set PHOTO_NAME = #{updateImageInfo.updateImageName},
            PHOTO_PATH = #{updateImageInfo.updateImagePath}
        where FEED_ID = #{feedId};
    </update>

    <update id="update">
        update feed
        set contents = #{contents}
        where feed_id = #{feedId}
    </update>


    <update id="updateRefOrder">
        update COMMENT
        set GROUP_REFORDER = GROUP_REFORDER + 1
        where GROUP_NUMBER = #{groupNumber}
          and GROUP_REFORDER &gt; #{parentOrderResult}
    </update>

    <update id="updateChild">
        update COMMENT
        set CHILD_NUMBER = CHILD_NUMBER + 1
        where COMMENT_ID = #{parentId}
    </update>


    <select id="findByFeedAndUser" resultType="com.example.flabcaloriecounter.feed.domain.Like">
        select likes_id, feed_id, user_id, likes_state
        from LIKES
        where USER_ID = #{userId}
          and FEED_ID = #{feedId};
    </select>

    <insert id="like">
        insert into likes(user_id, FEED_ID, LIKES_STATE)
        values (#{userId}, #{feedId}, #{likeStatus})
    </insert>

    <update id="unLike">
        update LIKES
        set LIKES_STATE = #{likeStatus}
        where feed_id = #{feedId}
    </update>

    <select id="likeCount" resultType="int">
        select count(*)
        from LIKES
        where FEED_ID = #{feedId}
          and LIKES_STATE = #{likeStatus}
    </select>

    <select id="findLikeStatusByUserId" parameterType="long"
            resultType="com.example.flabcaloriecounter.feed.domain.LikeStatus">
        select LIKES_STATE
        from LIKES
        where USER_ID = #{userId}
          and FEED_ID = #{feedId}
    </select>

    <insert id="insertComment"
            parameterType="com.example.flabcaloriecounter.feed.application.port.in.dto.CommentRequestDto">
        INSERT INTO COMMENT(FEED_ID, CONTENTS, USER_ID, GROUP_NUMBER)
        values (#{feedId}, #{commentRequestDto.contents}, #{userId}, #{commentRequestDto.groupNumber})
        <selectKey keyColumn="COMMENT_ID" keyProperty="commentRequestDto.commentId" resultType="long" order="AFTER">
            select last_insert_id()
        </selectKey>
    </insert>

    <select id="countParent" parameterType="long" resultType="int">
        select count(*)
        from COMMENT
        where FEED_ID = #{feedId}
          and DEPTH = 0
    </select>

    <insert id="insertReply"
            parameterType="com.example.flabcaloriecounter.feed.application.port.in.dto.ReplyDto">
        INSERT INTO COMMENT(FEED_ID, USER_ID, CONTENTS, PARENT_ID, DEPTH, GROUP_NUMBER, GROUP_REFORDER)
        values (#{replyDto.feedId}, #{replyDto.userId}, #{replyDto.contents}, #{replyDto.parentId}, #{replyDto.depth},
        #{replyDto.groupNumber},#{replyDto.refOrder})
        <selectKey keyColumn="COMMENT_ID" keyProperty="replyDto.commentId" resultType="long" order="AFTER">
            select last_insert_id()
        </selectKey>
    </insert>

    <select id="findCommentById" parameterType="Long"
            resultType="com.example.flabcaloriecounter.feed.domain.Comment">
        select COMMENT_ID,
               FEED_ID,
               WRITEDATE,
               CONTENTS,
               PARENT_ID,
               DEPTH,
               USER_ID,
               GROUP_NUMBER,
               GROUP_REFORDER,
               CHILD_NUMBER
        from COMMENT
        where COMMENT_ID = #{parentId}
    </select>

    <select id="comment" resultType="com.example.flabcaloriecounter.feed.domain.Comment">
        select c.comment_id,
               c.feed_id,
               c.writeDate,
               c.contents,
               c.parent_id,
               c.depth,
               c.USER_ID,
               c.GROUP_NUMBER,
               c.GROUP_REFORDER,
               c.CHILD_NUMBER
        from comment c
                 inner join user_table u on u.id = c.user_id
        where feed_id = #{feedId}
        order by c.group_number, c.GROUP_REFORDER
        limit #{offset},#{commentPerPage};
    </select>

    <delete id="delete" parameterType="long">
        delete
        from FEED
        where FEED_ID = #{feedId};
    </delete>
</mapper>